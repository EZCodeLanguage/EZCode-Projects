# project properties : isvisual:true, fileinerror:false, name:Complex Movement With Bounds And Collisions
method Start
    global var isRunning true
    global shape Player bg:[255;0;0]

    var Bounds_X_End 400
    var Bounds_Y_End 400
    var Bounds_X_Start 0
    var Bounds_Y_Start 0
    global var Speed 4
    global var X 0
    global var Y 0
    
    global shape Block x:350, y:175, bg:[0;0;255]

    loop isRunning {
        await 10
        // Movement
        Movement
        // Collisions
        Collisions
        // Check Quit
        var quit : input key Escape
        if 'quit' : isRunning = false
        // Bounds
        math clamp(X,Bounds_X_Start,Bounds_X_End) : X
        math clamp(Y,Bounds_Y_Start,Bounds_Y_End) : Y
        // Set Player Position
        Player x:X, y:Y
    }
endmethod

method Collisions
    var Inter : intersects Player Block
    if Inter : {
        var colX ins:X | var colY ins:Y | var colW ins:W | var colH ins:H
        var playW Player:W | var playH Player:H
        var pad 8
        var Player_X_End : math playW + X - pad
        var Player_Y_End : math playH + Y - pad
        var Collision_X_End : math colX + colW - pad
        var Collision_Y_End : math colY + colH - pad
        var handled 0
        
        if ! handled & X >= Collision_X_End : { | X + Speed | handled = 1 | }
        if ! handled & Y >= Collision_Y_End : { | Y + Speed | handled = 1 | }
        if ! handled & Player_X_End <= colX : { | X - Speed | handled = 1 | }
        if ! handled & Player_Y_End <= colY : { | Y - Speed | handled = 1 | }
    }
endmethod

method Movement
    var Left : input key Left | if ! Left : | Left : input key A
    var Right : input key Right | if ! Right : | Right : input key D
    var Up : input key Up | if ! Up : | Up : input key W
    var Down : input key Down | if ! Down : | Down : input key S
    Normalize : Up, Down, Left, Right
    if Left : X - Speed
    if Right : X + Speed
    if Up : Y - Speed
    if Down : Y + Speed
endmethod

method Normalize : up:0, down:0, left:0, right:0
    var normalize_speed 0.5
    if left & ! down & ! up : X - speed
    if left & down & ! up : X - normalize_speed
    if left & ! down & up : X - normalize_speed
    if right & ! down & ! up : X + speed
    if right & down & ! up : X + normalize_speed
    if right & ! down & up : X + normalize_speed
    if down & ! left & ! right : Y + speed
    if down & left & ! right : Y + normalize_speed
    if down & ! left & right : Y + normalize_speed
    if up & ! left & ! right : Y - speed
    if up & ! left & right : Y - normalize_speed
    if up & left & ! right : Y - normalize_speed
endmethod